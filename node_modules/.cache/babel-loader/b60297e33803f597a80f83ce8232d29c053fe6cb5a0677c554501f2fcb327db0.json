{"ast":null,"code":"// graphql.service.js\nimport { getToken } from './auth.service';\nconst GRAPHQL_ENDPOINT = 'https://learn.reboot01.com/api/graphql-engine/v1/graphql';\n\n// Function to execute GraphQL queries\nexport const executeQuery = async (query, variables = {}) => {\n  let token = getToken();\n  if (!token) {\n    throw new Error('Authentication required');\n  }\n\n  // Clean the token - remove any quotes or extra whitespace\n  token = token.replace(/^\"(.*)\"$/, '$1').trim();\n  console.log('Using token for GraphQL (first 20 chars):', token.substring(0, 20) + '...');\n  console.log('Token parts:', token.split('.').length);\n  try {\n    const response = await fetch(GRAPHQL_ENDPOINT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        query,\n        variables\n      })\n    });\n\n    // Log the status for debugging\n    console.log('GraphQL response status:', response.status);\n\n    // If the status is 401 or 403, it's likely an authentication issue\n    if (response.status === 401 || response.status === 403) {\n      console.error('Authentication issue with GraphQL request');\n      // Try to read the error response\n      const errorText = await response.text();\n      console.error('Error response:', errorText);\n      throw new Error('Authentication failed for GraphQL request');\n    }\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('GraphQL error response:', errorText);\n      throw new Error(`GraphQL request failed with status ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.errors) {\n      console.error('GraphQL response errors:', data.errors);\n      throw new Error(data.errors[0].message || 'GraphQL error');\n    }\n    return data.data;\n  } catch (error) {\n    console.error('GraphQL Error:', error);\n    throw error;\n  }\n};\n\n// Query to get user basic information\nexport const getUserQuery = `\n  query GetUser {\n    user {\n      id\n      login\n    }\n  }\n`;\n\n// Query to get user XP information\nexport const getUserXpQuery = `\n  query GetUserXp {\n    transaction(where: {type: {_eq: \"xp\"}}, order_by: {createdAt: asc}) {\n      id\n      amount\n      objectId\n      createdAt\n      path\n    }\n  }\n`;\n\n// Query to get projects and their results\nexport const getUserProgressQuery = `\n  query GetUserProgress {\n    progress {\n      id\n      objectId\n      grade\n      createdAt\n      path\n      object {\n        name\n        type\n      }\n    }\n  }\n`;\n\n// Query to get audit ratio data\nexport const getAuditRatioQuery = `\n  query GetAuditRatio {\n    transaction(where: {type: {_in: [\"up\", \"down\"]}}) {\n      id\n      type\n      amount\n      createdAt\n    }\n  }\n`;\n\n// Query to get specific object details\nexport const getObjectQuery = `\n  query GetObject($objectId: Int!) {\n    object(where: {id: {_eq: $objectId}}) {\n      id\n      name\n      type\n      attrs\n    }\n  }\n`;\n\n// Query to get project results\nexport const getProjectResultsQuery = `\n  query GetProjectResults {\n    result {\n      id\n      objectId\n      grade\n      createdAt\n      path\n      object {\n        name\n        type\n      }\n    }\n  }\n`;","map":{"version":3,"names":["getToken","GRAPHQL_ENDPOINT","executeQuery","query","variables","token","Error","replace","trim","console","log","substring","split","length","response","fetch","method","headers","body","JSON","stringify","status","error","errorText","text","ok","data","json","errors","message","getUserQuery","getUserXpQuery","getUserProgressQuery","getAuditRatioQuery","getObjectQuery","getProjectResultsQuery"],"sources":["C:/Users/MancavePC - 79/Desktop/Reboot/graphql-github/graphql/src/services/graphql.service.js"],"sourcesContent":["// graphql.service.js\r\nimport { getToken } from './auth.service';\r\n\r\nconst GRAPHQL_ENDPOINT = 'https://learn.reboot01.com/api/graphql-engine/v1/graphql';\r\n\r\n// Function to execute GraphQL queries\r\nexport const executeQuery = async (query, variables = {}) => {\r\n  let token = getToken();\r\n  \r\n  if (!token) {\r\n    throw new Error('Authentication required');\r\n  }\r\n  \r\n  // Clean the token - remove any quotes or extra whitespace\r\n  token = token.replace(/^\"(.*)\"$/, '$1').trim();\r\n  \r\n  console.log('Using token for GraphQL (first 20 chars):', token.substring(0, 20) + '...');\r\n  console.log('Token parts:', token.split('.').length);\r\n  \r\n  try {\r\n    const response = await fetch(GRAPHQL_ENDPOINT, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify({\r\n        query,\r\n        variables\r\n      })\r\n    });\r\n    \r\n    // Log the status for debugging\r\n    console.log('GraphQL response status:', response.status);\r\n    \r\n    // If the status is 401 or 403, it's likely an authentication issue\r\n    if (response.status === 401 || response.status === 403) {\r\n      console.error('Authentication issue with GraphQL request');\r\n      // Try to read the error response\r\n      const errorText = await response.text();\r\n      console.error('Error response:', errorText);\r\n      throw new Error('Authentication failed for GraphQL request');\r\n    }\r\n    \r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error('GraphQL error response:', errorText);\r\n      throw new Error(`GraphQL request failed with status ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (data.errors) {\r\n      console.error('GraphQL response errors:', data.errors);\r\n      throw new Error(data.errors[0].message || 'GraphQL error');\r\n    }\r\n    \r\n    return data.data;\r\n  } catch (error) {\r\n    console.error('GraphQL Error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Query to get user basic information\r\nexport const getUserQuery = `\r\n  query GetUser {\r\n    user {\r\n      id\r\n      login\r\n    }\r\n  }\r\n`;\r\n\r\n// Query to get user XP information\r\nexport const getUserXpQuery = `\r\n  query GetUserXp {\r\n    transaction(where: {type: {_eq: \"xp\"}}, order_by: {createdAt: asc}) {\r\n      id\r\n      amount\r\n      objectId\r\n      createdAt\r\n      path\r\n    }\r\n  }\r\n`;\r\n\r\n// Query to get projects and their results\r\nexport const getUserProgressQuery = `\r\n  query GetUserProgress {\r\n    progress {\r\n      id\r\n      objectId\r\n      grade\r\n      createdAt\r\n      path\r\n      object {\r\n        name\r\n        type\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n// Query to get audit ratio data\r\nexport const getAuditRatioQuery = `\r\n  query GetAuditRatio {\r\n    transaction(where: {type: {_in: [\"up\", \"down\"]}}) {\r\n      id\r\n      type\r\n      amount\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\n// Query to get specific object details\r\nexport const getObjectQuery = `\r\n  query GetObject($objectId: Int!) {\r\n    object(where: {id: {_eq: $objectId}}) {\r\n      id\r\n      name\r\n      type\r\n      attrs\r\n    }\r\n  }\r\n`;\r\n\r\n// Query to get project results\r\nexport const getProjectResultsQuery = `\r\n  query GetProjectResults {\r\n    result {\r\n      id\r\n      objectId\r\n      grade\r\n      createdAt\r\n      path\r\n      object {\r\n        name\r\n        type\r\n      }\r\n    }\r\n  }\r\n`;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}