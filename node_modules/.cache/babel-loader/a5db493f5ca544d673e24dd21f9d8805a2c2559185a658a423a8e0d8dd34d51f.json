{"ast":null,"code":"// Function to parse JWT token\nexport const parseJwt = token => {\n  try {\n    // Get the payload part of the JWT (second part)\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => `%${('00' + c.charCodeAt(0).toString(16)).slice(-2)}`).join(''));\n    return JSON.parse(jsonPayload);\n  } catch (e) {\n    console.error('Error parsing JWT', e);\n    return null;\n  }\n};\n\n// Function to get the authenticated user ID from JWT\nexport const getUserIdFromJwt = token => {\n  const decodedToken = parseJwt(token);\n  return decodedToken ? decodedToken.sub || decodedToken.userId || null : null;\n};\n\n// Check if user is authenticated (token exists and is not expired)\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    return false;\n  }\n  try {\n    const decodedToken = parseJwt(token);\n\n    // Check if token is expired\n    if (decodedToken.exp && decodedToken.exp * 1000 < Date.now()) {\n      localStorage.removeItem('token');\n      return false;\n    }\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\n// Log out user by removing the token\nexport const logout = () => {\n  localStorage.removeItem('token');\n  window.location.href = '/';\n};\n\n// Get the authentication token\nexport const getToken = () => {\n  return localStorage.getItem('token');\n};","map":{"version":3,"names":["parseJwt","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","e","console","error","getUserIdFromJwt","decodedToken","sub","userId","isAuthenticated","localStorage","getItem","exp","Date","now","removeItem","logout","window","location","href","getToken"],"sources":["C:/Users/MancavePC - 79/Desktop/Reboot/graphql/src/services/auth.service.js"],"sourcesContent":["// Function to parse JWT token\r\nexport const parseJwt = (token) => {\r\n    try {\r\n      // Get the payload part of the JWT (second part)\r\n      const base64Url = token.split('.')[1];\r\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n      const jsonPayload = decodeURIComponent(\r\n        atob(base64)\r\n          .split('')\r\n          .map((c) => `%${('00' + c.charCodeAt(0).toString(16)).slice(-2)}`)\r\n          .join('')\r\n      );\r\n  \r\n      return JSON.parse(jsonPayload);\r\n    } catch (e) {\r\n      console.error('Error parsing JWT', e);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Function to get the authenticated user ID from JWT\r\n  export const getUserIdFromJwt = (token) => {\r\n    const decodedToken = parseJwt(token);\r\n    return decodedToken ? decodedToken.sub || decodedToken.userId || null : null;\r\n  };\r\n  \r\n  // Check if user is authenticated (token exists and is not expired)\r\n  export const isAuthenticated = () => {\r\n    const token = localStorage.getItem('token');\r\n    \r\n    if (!token) {\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      const decodedToken = parseJwt(token);\r\n      \r\n      // Check if token is expired\r\n      if (decodedToken.exp && decodedToken.exp * 1000 < Date.now()) {\r\n        localStorage.removeItem('token');\r\n        return false;\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Log out user by removing the token\r\n  export const logout = () => {\r\n    localStorage.removeItem('token');\r\n    window.location.href = '/';\r\n  };\r\n  \r\n  // Get the authentication token\r\n  export const getToken = () => {\r\n    return localStorage.getItem('token');\r\n  };"],"mappings":"AAAA;AACA,OAAO,MAAMA,QAAQ,GAAIC,KAAK,IAAK;EAC/B,IAAI;IACF;IACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACrC,MAAMC,MAAM,GAAGF,SAAS,CAACG,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;IAC9D,MAAMC,WAAW,GAAGC,kBAAkB,CACpCC,IAAI,CAACJ,MAAM,CAAC,CACTD,KAAK,CAAC,EAAE,CAAC,CACTM,GAAG,CAAEC,CAAC,IAAK,IAAI,CAAC,IAAI,GAAGA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CACjEC,IAAI,CAAC,EAAE,CACZ,CAAC;IAED,OAAOC,IAAI,CAACC,KAAK,CAACV,WAAW,CAAC;EAChC,CAAC,CAAC,OAAOW,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,mBAAmB,EAAEF,CAAC,CAAC;IACrC,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,gBAAgB,GAAInB,KAAK,IAAK;EACzC,MAAMoB,YAAY,GAAGrB,QAAQ,CAACC,KAAK,CAAC;EACpC,OAAOoB,YAAY,GAAGA,YAAY,CAACC,GAAG,IAAID,YAAY,CAACE,MAAM,IAAI,IAAI,GAAG,IAAI;AAC9E,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMvB,KAAK,GAAGwB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3C,IAAI,CAACzB,KAAK,EAAE;IACV,OAAO,KAAK;EACd;EAEA,IAAI;IACF,MAAMoB,YAAY,GAAGrB,QAAQ,CAACC,KAAK,CAAC;;IAEpC;IACA,IAAIoB,YAAY,CAACM,GAAG,IAAIN,YAAY,CAACM,GAAG,GAAG,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MAC5DJ,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;MAChC,OAAO,KAAK;IACd;IAEA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOX,KAAK,EAAE;IACd,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMY,MAAM,GAAGA,CAAA,KAAM;EAC1BN,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;EAChCE,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;AAC5B,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAC5B,OAAOV,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AACtC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}