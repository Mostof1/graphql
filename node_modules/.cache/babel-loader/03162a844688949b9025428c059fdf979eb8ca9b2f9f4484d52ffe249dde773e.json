{"ast":null,"code":"// auth.service.js\n\n// Function to parse JWT token\nexport const parseJwt = token => {\n  try {\n    // Check if token exists\n    if (!token) {\n      console.error('No token provided to parseJwt');\n      return null;\n    }\n\n    // Validate token format\n    if (typeof token !== 'string') {\n      console.error('Token is not a string:', typeof token);\n      return null;\n    }\n\n    // Check for proper JWT format (should have 3 parts separated by dots)\n    const parts = token.split('.');\n    if (parts.length !== 3) {\n      console.error('Invalid JWT format. Expected 3 parts, got:', parts.length);\n      return null;\n    }\n\n    // Get the payload part of the JWT (second part)\n    const base64Url = parts[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n\n    // Try to decode the base64\n    let jsonPayload;\n    try {\n      jsonPayload = decodeURIComponent(atob(base64).split('').map(c => `%${('00' + c.charCodeAt(0).toString(16)).slice(-2)}`).join(''));\n    } catch (decodeError) {\n      console.error('Error decoding JWT payload:', decodeError);\n      return null;\n    }\n\n    // Parse the JSON\n    return JSON.parse(jsonPayload);\n  } catch (e) {\n    console.error('Error parsing JWT', e);\n    return null;\n  }\n};\n\n// Function to get the authenticated user ID from JWT\nexport const getUserIdFromJwt = token => {\n  // Validate token before attempting to parse\n  if (!token) {\n    console.error('No token provided to getUserIdFromJwt');\n    return null;\n  }\n  const decodedToken = parseJwt(token);\n  if (!decodedToken) {\n    console.error('Failed to decode token in getUserIdFromJwt');\n    return null;\n  }\n\n  // Check various common properties where user ID might be stored\n  const userId = decodedToken.sub || decodedToken.userId || decodedToken.user_id || decodedToken.id;\n  if (!userId) {\n    console.warn('No user ID found in token payload:', decodedToken);\n  }\n  return userId || null;\n};\n\n// Check if user is authenticated (token exists and is not expired)\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    return false;\n  }\n  try {\n    const decodedToken = parseJwt(token);\n\n    // Check if token is expired\n    if (decodedToken.exp && decodedToken.exp * 1000 < Date.now()) {\n      localStorage.removeItem('token');\n      return false;\n    }\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\n// Log out user by removing the token\nexport const logout = () => {\n  localStorage.removeItem('token');\n  window.location.href = '/';\n};\n\n// Get the authentication token\nexport const getToken = () => {\n  const token = localStorage.getItem('token');\n\n  // Make sure we clean the token - remove any quotes or whitespace\n  if (token) {\n    return token.trim().replace(/^\"(.*)\"$/, '$1');\n  }\n  return null;\n};","map":{"version":3,"names":["parseJwt","token","console","error","parts","split","length","base64Url","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","decodeError","JSON","parse","e","getUserIdFromJwt","decodedToken","userId","sub","user_id","id","warn","isAuthenticated","localStorage","getItem","exp","Date","now","removeItem","logout","window","location","href","getToken","trim"],"sources":["C:/Users/MancavePC - 79/Desktop/Reboot/graphql-github/graphql/src/services/auth.service.js"],"sourcesContent":["// auth.service.js\r\n\r\n// Function to parse JWT token\r\nexport const parseJwt = (token) => {\r\n    try {\r\n      // Check if token exists\r\n      if (!token) {\r\n        console.error('No token provided to parseJwt');\r\n        return null;\r\n      }\r\n      \r\n      // Validate token format\r\n      if (typeof token !== 'string') {\r\n        console.error('Token is not a string:', typeof token);\r\n        return null;\r\n      }\r\n      \r\n      // Check for proper JWT format (should have 3 parts separated by dots)\r\n      const parts = token.split('.');\r\n      if (parts.length !== 3) {\r\n        console.error('Invalid JWT format. Expected 3 parts, got:', parts.length);\r\n        return null;\r\n      }\r\n      \r\n      // Get the payload part of the JWT (second part)\r\n      const base64Url = parts[1];\r\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n      \r\n      // Try to decode the base64\r\n      let jsonPayload;\r\n      try {\r\n        jsonPayload = decodeURIComponent(\r\n          atob(base64)\r\n            .split('')\r\n            .map((c) => `%${('00' + c.charCodeAt(0).toString(16)).slice(-2)}`)\r\n            .join('')\r\n        );\r\n      } catch (decodeError) {\r\n        console.error('Error decoding JWT payload:', decodeError);\r\n        return null;\r\n      }\r\n  \r\n      // Parse the JSON\r\n      return JSON.parse(jsonPayload);\r\n    } catch (e) {\r\n      console.error('Error parsing JWT', e);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Function to get the authenticated user ID from JWT\r\n  export const getUserIdFromJwt = (token) => {\r\n    // Validate token before attempting to parse\r\n    if (!token) {\r\n      console.error('No token provided to getUserIdFromJwt');\r\n      return null;\r\n    }\r\n    \r\n    const decodedToken = parseJwt(token);\r\n    if (!decodedToken) {\r\n      console.error('Failed to decode token in getUserIdFromJwt');\r\n      return null;\r\n    }\r\n    \r\n    // Check various common properties where user ID might be stored\r\n    const userId = decodedToken.sub || \r\n                   decodedToken.userId || \r\n                   decodedToken.user_id || \r\n                   decodedToken.id;\r\n                   \r\n    if (!userId) {\r\n      console.warn('No user ID found in token payload:', decodedToken);\r\n    }\r\n    \r\n    return userId || null;\r\n  };\r\n  \r\n  // Check if user is authenticated (token exists and is not expired)\r\n  export const isAuthenticated = () => {\r\n    const token = localStorage.getItem('token');\r\n    \r\n    if (!token) {\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      const decodedToken = parseJwt(token);\r\n      \r\n      // Check if token is expired\r\n      if (decodedToken.exp && decodedToken.exp * 1000 < Date.now()) {\r\n        localStorage.removeItem('token');\r\n        return false;\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Log out user by removing the token\r\n  export const logout = () => {\r\n    localStorage.removeItem('token');\r\n    window.location.href = '/';\r\n  };\r\n  \r\n  // Get the authentication token\r\n  export const getToken = () => {\r\n    const token = localStorage.getItem('token');\r\n    \r\n    // Make sure we clean the token - remove any quotes or whitespace\r\n    if (token) {\r\n      return token.trim().replace(/^\"(.*)\"$/, '$1');\r\n    }\r\n    \r\n    return null;\r\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}