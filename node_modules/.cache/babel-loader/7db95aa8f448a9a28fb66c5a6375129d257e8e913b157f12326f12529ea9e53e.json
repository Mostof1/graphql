{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MancavePC - 79\\\\Desktop\\\\Reboot\\\\graphql\\\\src\\\\components\\\\graphs\\\\XpOverTime.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst XpOverTimeGraph = ({\n  xpData\n}) => {\n  _s();\n  const [totalPoints, setTotalPoints] = useState([]);\n  const [tooltipData, setTooltipData] = useState({\n    visible: false,\n    x: 0,\n    y: 0,\n    data: null\n  });\n\n  // Graph dimensions\n  const width = 800;\n  const height = 400;\n  const padding = {\n    top: 40,\n    right: 40,\n    bottom: 60,\n    left: 70\n  };\n  const graphWidth = width - padding.left - padding.right;\n  const graphHeight = height - padding.top - padding.bottom;\n  useEffect(() => {\n    if (!xpData || xpData.length === 0) return;\n\n    // Process XP data to create cumulative points\n    const processedData = xpData.reduce((acc, transaction, index) => {\n      const date = new Date(transaction.createdAt);\n      const prevTotal = index > 0 ? acc[index - 1].totalXp : 0;\n      const totalXp = prevTotal + transaction.amount;\n      acc.push({\n        id: transaction.id,\n        date,\n        xp: transaction.amount,\n        totalXp,\n        path: transaction.path\n      });\n      return acc;\n    }, []);\n    setTotalPoints(processedData);\n  }, [xpData]);\n\n  // Calculate scales\n  const getScales = () => {\n    if (totalPoints.length === 0) return {\n      xScale: () => 0,\n      yScale: () => 0\n    };\n    const xMin = totalPoints[0].date;\n    const xMax = totalPoints[totalPoints.length - 1].date;\n    const yMax = totalPoints[totalPoints.length - 1].totalXp;\n    const xScale = date => {\n      const timeRange = xMax.getTime() - xMin.getTime();\n      const percentage = (date.getTime() - xMin.getTime()) / timeRange;\n      return padding.left + percentage * graphWidth;\n    };\n    const yScale = value => {\n      return padding.top + graphHeight - value / yMax * graphHeight;\n    };\n    return {\n      xScale,\n      yScale\n    };\n  };\n  const {\n    xScale,\n    yScale\n  } = getScales();\n\n  // Generate path for the line\n  const generatePath = () => {\n    if (totalPoints.length === 0) return '';\n    let pathData = `M ${xScale(totalPoints[0].date)} ${yScale(totalPoints[0].totalXp)}`;\n    for (let i = 1; i < totalPoints.length; i++) {\n      pathData += ` L ${xScale(totalPoints[i].date)} ${yScale(totalPoints[i].totalXp)}`;\n    }\n    return pathData;\n  };\n\n  // Generate axes\n  const generateAxes = () => {\n    if (totalPoints.length === 0) return {\n      xAxisPoints: [],\n      yAxisPoints: []\n    };\n\n    // X-axis: dates (months)\n    const monthSet = new Set();\n    const xAxisPoints = [];\n    totalPoints.forEach(point => {\n      const monthYear = `${point.date.getMonth() + 1}/${point.date.getFullYear()}`;\n      if (!monthSet.has(monthYear)) {\n        monthSet.add(monthYear);\n        xAxisPoints.push({\n          x: xScale(point.date),\n          label: monthYear\n        });\n      }\n    });\n\n    // Y-axis: XP values\n    const yMax = totalPoints[totalPoints.length - 1].totalXp;\n    const yStep = Math.ceil(yMax / 5 / 1000) * 1000;\n    const yAxisPoints = [];\n    for (let i = 0; i <= 5; i++) {\n      const value = i * yStep;\n      yAxisPoints.push({\n        y: yScale(value),\n        label: `${value.toLocaleString()} XP`\n      });\n    }\n    return {\n      xAxisPoints,\n      yAxisPoints\n    };\n  };\n  const {\n    xAxisPoints,\n    yAxisPoints\n  } = generateAxes();\n\n  // Handle mouse hover for tooltips\n  const handleMouseOver = (point, index) => {\n    setTooltipData({\n      visible: true,\n      x: xScale(point.date),\n      y: yScale(point.totalXp),\n      data: {\n        date: point.date.toLocaleDateString(),\n        xp: point.xp,\n        totalXp: point.totalXp,\n        path: point.path\n      }\n    });\n  };\n  const handleMouseOut = () => {\n    setTooltipData({\n      ...tooltipData,\n      visible: false\n    });\n  };\n  if (totalPoints.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading XP data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"XP Progress Over Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      className: \"xp-graph\",\n      children: [/*#__PURE__*/_jsxDEV(\"text\", {\n        x: width / 2,\n        y: 20,\n        textAnchor: \"middle\",\n        className: \"graph-title\",\n        children: \"XP Earned Over Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: padding.left,\n        y1: height - padding.bottom,\n        x2: width - padding.right,\n        y2: height - padding.bottom,\n        stroke: \"#555b73\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), xAxisPoints.map((point, i) => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"line\", {\n          x1: point.x,\n          y1: height - padding.bottom,\n          x2: point.x,\n          y2: height - padding.bottom + 5,\n          stroke: \"#555b73\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: point.x,\n          y: height - padding.bottom + 20,\n          textAnchor: \"middle\",\n          className: \"axis-label\",\n          fill: \"#d0d0d0\",\n          fontWeight: \"500\",\n          children: point.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: padding.left,\n        y1: padding.top,\n        x2: padding.left,\n        y2: height - padding.bottom,\n        stroke: \"#555b73\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), yAxisPoints.map((point, i) => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"line\", {\n          x1: padding.left - 5,\n          y1: point.y,\n          x2: padding.left,\n          y2: point.y,\n          stroke: \"#555b73\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: padding.left - 10,\n          y: point.y + 5,\n          textAnchor: \"end\",\n          className: \"axis-label\",\n          fill: \"#d0d0d0\",\n          fontWeight: \"500\",\n          children: point.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: padding.left,\n          y1: point.y,\n          x2: width - padding.right,\n          y2: point.y,\n          stroke: \"#3f4868\",\n          strokeDasharray: \"5,5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"path\", {\n        d: generatePath(),\n        fill: \"none\",\n        stroke: \"#4CAF50\",\n        strokeWidth: \"3\",\n        className: \"xp-line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), totalPoints.map((point, index) => /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: xScale(point.date),\n        cy: yScale(point.totalXp),\n        r: \"4\",\n        fill: \"#4CAF50\",\n        onMouseOver: () => handleMouseOver(point, index),\n        onMouseOut: handleMouseOut,\n        className: \"data-point\"\n      }, point.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this)), tooltipData.visible && tooltipData.data && /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"tooltip\",\n        children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n          x: tooltipData.x + 10,\n          y: tooltipData.y - 70,\n          width: \"180\",\n          height: \"65\",\n          rx: \"5\",\n          fill: \"rgba(40, 44, 63, 0.9)\",\n          stroke: \"#4CAF50\",\n          strokeWidth: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: tooltipData.x + 20,\n          y: tooltipData.y - 50,\n          fill: \"white\",\n          fontWeight: \"500\",\n          children: [\"Date: \", tooltipData.data.date]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: tooltipData.x + 20,\n          y: tooltipData.y - 30,\n          fill: \"white\",\n          fontWeight: \"500\",\n          children: [\"XP Earned: \", tooltipData.data.xp.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: tooltipData.x + 20,\n          y: tooltipData.y - 10,\n          fill: \"white\",\n          fontWeight: \"500\",\n          children: [\"Total XP: \", tooltipData.data.totalXp.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(XpOverTimeGraph, \"/4/aroMTJA46O3nKIFL6LRuSiG4=\");\n_c = XpOverTimeGraph;\nexport default XpOverTimeGraph;\nvar _c;\n$RefreshReg$(_c, \"XpOverTimeGraph\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","XpOverTimeGraph","xpData","_s","totalPoints","setTotalPoints","tooltipData","setTooltipData","visible","x","y","data","width","height","padding","top","right","bottom","left","graphWidth","graphHeight","length","processedData","reduce","acc","transaction","index","date","Date","createdAt","prevTotal","totalXp","amount","push","id","xp","path","getScales","xScale","yScale","xMin","xMax","yMax","timeRange","getTime","percentage","value","generatePath","pathData","i","generateAxes","xAxisPoints","yAxisPoints","monthSet","Set","forEach","point","monthYear","getMonth","getFullYear","has","add","label","yStep","Math","ceil","toLocaleString","handleMouseOver","toLocaleDateString","handleMouseOut","children","fileName","_jsxFileName","lineNumber","columnNumber","className","textAnchor","x1","y1","x2","y2","stroke","strokeWidth","map","fill","fontWeight","strokeDasharray","d","cx","cy","r","onMouseOver","onMouseOut","rx","_c","$RefreshReg$"],"sources":["C:/Users/MancavePC - 79/Desktop/Reboot/graphql/src/components/graphs/XpOverTime.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst XpOverTimeGraph = ({ xpData }) => {\r\n  const [totalPoints, setTotalPoints] = useState([]);\r\n  const [tooltipData, setTooltipData] = useState({ visible: false, x: 0, y: 0, data: null });\r\n  \r\n  // Graph dimensions\r\n  const width = 800;\r\n  const height = 400;\r\n  const padding = { top: 40, right: 40, bottom: 60, left: 70 };\r\n  const graphWidth = width - padding.left - padding.right;\r\n  const graphHeight = height - padding.top - padding.bottom;\r\n  \r\n  useEffect(() => {\r\n    if (!xpData || xpData.length === 0) return;\r\n    \r\n    // Process XP data to create cumulative points\r\n    const processedData = xpData.reduce((acc, transaction, index) => {\r\n      const date = new Date(transaction.createdAt);\r\n      const prevTotal = index > 0 ? acc[index - 1].totalXp : 0;\r\n      const totalXp = prevTotal + transaction.amount;\r\n      \r\n      acc.push({\r\n        id: transaction.id,\r\n        date,\r\n        xp: transaction.amount,\r\n        totalXp,\r\n        path: transaction.path,\r\n      });\r\n      \r\n      return acc;\r\n    }, []);\r\n    \r\n    setTotalPoints(processedData);\r\n  }, [xpData]);\r\n  \r\n  // Calculate scales\r\n  const getScales = () => {\r\n    if (totalPoints.length === 0) return { xScale: () => 0, yScale: () => 0 };\r\n    \r\n    const xMin = totalPoints[0].date;\r\n    const xMax = totalPoints[totalPoints.length - 1].date;\r\n    const yMax = totalPoints[totalPoints.length - 1].totalXp;\r\n    \r\n    const xScale = (date) => {\r\n      const timeRange = xMax.getTime() - xMin.getTime();\r\n      const percentage = (date.getTime() - xMin.getTime()) / timeRange;\r\n      return padding.left + percentage * graphWidth;\r\n    };\r\n    \r\n    const yScale = (value) => {\r\n      return padding.top + graphHeight - (value / yMax) * graphHeight;\r\n    };\r\n    \r\n    return { xScale, yScale };\r\n  };\r\n  \r\n  const { xScale, yScale } = getScales();\r\n  \r\n  // Generate path for the line\r\n  const generatePath = () => {\r\n    if (totalPoints.length === 0) return '';\r\n    \r\n    let pathData = `M ${xScale(totalPoints[0].date)} ${yScale(totalPoints[0].totalXp)}`;\r\n    \r\n    for (let i = 1; i < totalPoints.length; i++) {\r\n      pathData += ` L ${xScale(totalPoints[i].date)} ${yScale(totalPoints[i].totalXp)}`;\r\n    }\r\n    \r\n    return pathData;\r\n  };\r\n  \r\n  // Generate axes\r\n  const generateAxes = () => {\r\n    if (totalPoints.length === 0) return { xAxisPoints: [], yAxisPoints: [] };\r\n    \r\n    // X-axis: dates (months)\r\n    const monthSet = new Set();\r\n    const xAxisPoints = [];\r\n    \r\n    totalPoints.forEach(point => {\r\n      const monthYear = `${point.date.getMonth() + 1}/${point.date.getFullYear()}`;\r\n      if (!monthSet.has(monthYear)) {\r\n        monthSet.add(monthYear);\r\n        xAxisPoints.push({\r\n          x: xScale(point.date),\r\n          label: monthYear\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Y-axis: XP values\r\n    const yMax = totalPoints[totalPoints.length - 1].totalXp;\r\n    const yStep = Math.ceil(yMax / 5 / 1000) * 1000;\r\n    const yAxisPoints = [];\r\n    \r\n    for (let i = 0; i <= 5; i++) {\r\n      const value = i * yStep;\r\n      yAxisPoints.push({\r\n        y: yScale(value),\r\n        label: `${value.toLocaleString()} XP`\r\n      });\r\n    }\r\n    \r\n    return { xAxisPoints, yAxisPoints };\r\n  };\r\n  \r\n  const { xAxisPoints, yAxisPoints } = generateAxes();\r\n  \r\n  // Handle mouse hover for tooltips\r\n  const handleMouseOver = (point, index) => {\r\n    setTooltipData({\r\n      visible: true,\r\n      x: xScale(point.date),\r\n      y: yScale(point.totalXp),\r\n      data: {\r\n        date: point.date.toLocaleDateString(),\r\n        xp: point.xp,\r\n        totalXp: point.totalXp,\r\n        path: point.path\r\n      }\r\n    });\r\n  };\r\n  \r\n  const handleMouseOut = () => {\r\n    setTooltipData({ ...tooltipData, visible: false });\r\n  };\r\n  \r\n  if (totalPoints.length === 0) {\r\n    return <div>Loading XP data...</div>;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"graph-container\">\r\n      <h3>XP Progress Over Time</h3>\r\n      <svg width={width} height={height} className=\"xp-graph\">\r\n        {/* Graph title */}\r\n        <text x={width / 2} y={20} textAnchor=\"middle\" className=\"graph-title\">\r\n          XP Earned Over Time\r\n        </text>\r\n        \r\n        {/* X-axis */}\r\n        <line\r\n          x1={padding.left}\r\n          y1={height - padding.bottom}\r\n          x2={width - padding.right}\r\n          y2={height - padding.bottom}\r\n          stroke=\"#555b73\"\r\n          strokeWidth=\"2\"\r\n        />\r\n        \r\n        {/* X-axis labels */}\r\n        {xAxisPoints.map((point, i) => (\r\n          <g key={i}>\r\n            <line\r\n              x1={point.x}\r\n              y1={height - padding.bottom}\r\n              x2={point.x}\r\n              y2={height - padding.bottom + 5}\r\n              stroke=\"#555b73\"\r\n            />\r\n            <text\r\n              x={point.x}\r\n              y={height - padding.bottom + 20}\r\n              textAnchor=\"middle\"\r\n              className=\"axis-label\"\r\n              fill=\"#d0d0d0\"\r\n              fontWeight=\"500\"\r\n            >\r\n              {point.label}\r\n            </text>\r\n          </g>\r\n        ))}\r\n        \r\n        {/* Y-axis */}\r\n        <line\r\n          x1={padding.left}\r\n          y1={padding.top}\r\n          x2={padding.left}\r\n          y2={height - padding.bottom}\r\n          stroke=\"#555b73\"\r\n          strokeWidth=\"2\"\r\n        />\r\n        \r\n        {/* Y-axis labels */}\r\n        {yAxisPoints.map((point, i) => (\r\n          <g key={i}>\r\n            <line\r\n              x1={padding.left - 5}\r\n              y1={point.y}\r\n              x2={padding.left}\r\n              y2={point.y}\r\n              stroke=\"#555b73\"\r\n            />\r\n            <text\r\n              x={padding.left - 10}\r\n              y={point.y + 5}\r\n              textAnchor=\"end\"\r\n              className=\"axis-label\"\r\n              fill=\"#d0d0d0\"\r\n              fontWeight=\"500\"\r\n            >\r\n              {point.label}\r\n            </text>\r\n            \r\n            {/* Grid line */}\r\n            <line\r\n              x1={padding.left}\r\n              y1={point.y}\r\n              x2={width - padding.right}\r\n              y2={point.y}\r\n              stroke=\"#3f4868\"\r\n              strokeDasharray=\"5,5\"\r\n            />\r\n          </g>\r\n        ))}\r\n        \r\n        {/* The XP line */}\r\n        <path\r\n          d={generatePath()}\r\n          fill=\"none\"\r\n          stroke=\"#4CAF50\"\r\n          strokeWidth=\"3\"\r\n          className=\"xp-line\"\r\n        />\r\n        \r\n        {/* Data points */}\r\n        {totalPoints.map((point, index) => (\r\n          <circle\r\n            key={point.id}\r\n            cx={xScale(point.date)}\r\n            cy={yScale(point.totalXp)}\r\n            r=\"4\"\r\n            fill=\"#4CAF50\"\r\n            onMouseOver={() => handleMouseOver(point, index)}\r\n            onMouseOut={handleMouseOut}\r\n            className=\"data-point\"\r\n          />\r\n        ))}\r\n        \r\n        {/* Tooltip */}\r\n        {tooltipData.visible && tooltipData.data && (\r\n          <g className=\"tooltip\">\r\n            <rect\r\n              x={tooltipData.x + 10}\r\n              y={tooltipData.y - 70}\r\n              width=\"180\"\r\n              height=\"65\"\r\n              rx=\"5\"\r\n              fill=\"rgba(40, 44, 63, 0.9)\"\r\n              stroke=\"#4CAF50\"\r\n              strokeWidth=\"1\"\r\n            />\r\n            <text x={tooltipData.x + 20} y={tooltipData.y - 50} fill=\"white\" fontWeight=\"500\">\r\n              Date: {tooltipData.data.date}\r\n            </text>\r\n            <text x={tooltipData.x + 20} y={tooltipData.y - 30} fill=\"white\" fontWeight=\"500\">\r\n              XP Earned: {tooltipData.data.xp.toLocaleString()}\r\n            </text>\r\n            <text x={tooltipData.x + 20} y={tooltipData.y - 10} fill=\"white\" fontWeight=\"500\">\r\n              Total XP: {tooltipData.data.totalXp.toLocaleString()}\r\n            </text>\r\n          </g>\r\n        )}\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default XpOverTimeGraph;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}